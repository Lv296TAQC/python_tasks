<ns0:test-suite xmlns:ns0="urn:model.allure.qatools.yandex.ru" start="1521562444808" stop="1521562444942">
  <name>tests.pytest.test_pytest_task_88d</name>
  <labels/>
  <test-cases>
    <test-case start="1521562444808" status="failed" stop="1521562444892">
      <name>test_one_bounds[for0]</name>
      <failure>
        <message>AssertionError: assert 2 == 101
 +  where 2 = one_bounds(0)</message>
        <stack-trace>input = 0, expected = 101

    @pytest.allure.step('First step')
    @pytest.mark.parametrize('input, expected',
                             [(0, 101),
                              (5, 151),
                              (10, 1101),
                              (15, 1151)],
                             ids=['for0', 'for5', 'for10', 'for15'
    ])
    def test_one_bounds(input, expected):
        logging.info('Function one_bounds: Input - {}, actual result - {}, '
                     'expected result - {}'.format(input, one_bounds(input), expected))
        if one_bounds(input) != expected:
            logging.error('This test failed')
&gt;       assert one_bounds(input) == expected
E       assert 2 == 101
E        +  where 2 = one_bounds(0)

test_pytest_task_88d.py:25: AssertionError</stack-trace>
      </failure>
      <attachments>
        <attachment source="2eecbc47-2dad-48f4-8a1f-40af8876bece-attachment.txt" title="Captured log call" type="text/plain"/>
      </attachments>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="4224-MainThread"/>
        <label name="host" value="Ostap-ПК"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps>
        <step start="1521562444813" status="failed" stop="1521562444813">
          <name>First step</name>
          <title>First step</title>
          <attachments/>
          <steps/>
        </step>
      </steps>
    </test-case>
    <test-case start="1521562444895" status="failed" stop="1521562444902">
      <name>test_one_bounds[for5]</name>
      <failure>
        <message>AssertionError: assert 7 == 151
 +  where 7 = one_bounds(5)</message>
        <stack-trace>input = 5, expected = 151

    @pytest.allure.step('First step')
    @pytest.mark.parametrize('input, expected',
                             [(0, 101),
                              (5, 151),
                              (10, 1101),
                              (15, 1151)],
                             ids=['for0', 'for5', 'for10', 'for15'
    ])
    def test_one_bounds(input, expected):
        logging.info('Function one_bounds: Input - {}, actual result - {}, '
                     'expected result - {}'.format(input, one_bounds(input), expected))
        if one_bounds(input) != expected:
            logging.error('This test failed')
&gt;       assert one_bounds(input) == expected
E       assert 7 == 151
E        +  where 7 = one_bounds(5)

test_pytest_task_88d.py:25: AssertionError</stack-trace>
      </failure>
      <attachments>
        <attachment source="186845a8-745a-4b10-99f3-f55a3624b8c9-attachment.txt" title="Captured log call" type="text/plain"/>
      </attachments>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="4224-MainThread"/>
        <label name="host" value="Ostap-ПК"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps>
        <step start="1521562444896" status="failed" stop="1521562444897">
          <name>First step</name>
          <title>First step</title>
          <attachments/>
          <steps/>
        </step>
      </steps>
    </test-case>
    <test-case start="1521562444904" status="failed" stop="1521562444911">
      <name>test_one_bounds[for10]</name>
      <failure>
        <message>AssertionError: assert 21 == 1101
 +  where 21 = one_bounds(10)</message>
        <stack-trace>input = 10, expected = 1101

    @pytest.allure.step('First step')
    @pytest.mark.parametrize('input, expected',
                             [(0, 101),
                              (5, 151),
                              (10, 1101),
                              (15, 1151)],
                             ids=['for0', 'for5', 'for10', 'for15'
    ])
    def test_one_bounds(input, expected):
        logging.info('Function one_bounds: Input - {}, actual result - {}, '
                     'expected result - {}'.format(input, one_bounds(input), expected))
        if one_bounds(input) != expected:
            logging.error('This test failed')
&gt;       assert one_bounds(input) == expected
E       assert 21 == 1101
E        +  where 21 = one_bounds(10)

test_pytest_task_88d.py:25: AssertionError</stack-trace>
      </failure>
      <attachments>
        <attachment source="470df1b6-fb79-4bdc-a847-6557a06df476-attachment.txt" title="Captured log call" type="text/plain"/>
      </attachments>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="4224-MainThread"/>
        <label name="host" value="Ostap-ПК"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps>
        <step start="1521562444906" status="failed" stop="1521562444906">
          <name>First step</name>
          <title>First step</title>
          <attachments/>
          <steps/>
        </step>
      </steps>
    </test-case>
    <test-case start="1521562444913" status="failed" stop="1521562444920">
      <name>test_one_bounds[for15]</name>
      <failure>
        <message>AssertionError: assert 26 == 1151
 +  where 26 = one_bounds(15)</message>
        <stack-trace>input = 15, expected = 1151

    @pytest.allure.step('First step')
    @pytest.mark.parametrize('input, expected',
                             [(0, 101),
                              (5, 151),
                              (10, 1101),
                              (15, 1151)],
                             ids=['for0', 'for5', 'for10', 'for15'
    ])
    def test_one_bounds(input, expected):
        logging.info('Function one_bounds: Input - {}, actual result - {}, '
                     'expected result - {}'.format(input, one_bounds(input), expected))
        if one_bounds(input) != expected:
            logging.error('This test failed')
&gt;       assert one_bounds(input) == expected
E       assert 26 == 1151
E        +  where 26 = one_bounds(15)

test_pytest_task_88d.py:25: AssertionError</stack-trace>
      </failure>
      <attachments>
        <attachment source="93bb22f0-b02f-444f-bfee-ca3553c302c1-attachment.txt" title="Captured log call" type="text/plain"/>
      </attachments>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="4224-MainThread"/>
        <label name="host" value="Ostap-ПК"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps>
        <step start="1521562444915" status="failed" stop="1521562444915">
          <name>First step</name>
          <title>First step</title>
          <attachments/>
          <steps/>
        </step>
      </steps>
    </test-case>
    <test-case start="1521562444922" status="passed" stop="1521562444924">
      <name>test_one_bounds_for_error</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="4224-MainThread"/>
        <label name="host" value="Ostap-ПК"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps>
        <step start="1521562444923" status="passed" stop="1521562444924">
          <name>Third step</name>
          <title>Third step</title>
          <attachments/>
          <steps/>
        </step>
      </steps>
    </test-case>
    <test-case start="1521562444925" status="passed" stop="1521562444927">
      <name>test_one_bounds_for_error2</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="4224-MainThread"/>
        <label name="host" value="Ostap-ПК"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps>
        <step start="1521562444927" status="passed" stop="1521562444927">
          <name>Fourth step</name>
          <title>Fourth step</title>
          <attachments/>
          <steps/>
        </step>
      </steps>
    </test-case>
    <test-case start="1521562444928" status="passed" stop="1521562444930">
      <name>test_validate</name>
      <attachments/>
      <labels>
        <label name="severity" value="blocker"/>
        <label name="thread" value="4224-MainThread"/>
        <label name="host" value="Ostap-ПК"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps>
        <step start="1521562444929" status="passed" stop="1521562444929">
          <name>Fifth step</name>
          <title>Fifth step</title>
          <attachments/>
          <steps/>
        </step>
      </steps>
    </test-case>
    <test-case start="1521562444930" status="passed" stop="1521562444932">
      <name>test_validate_for_invalid[for_string]</name>
      <attachments>
        <attachment source="b24cafc2-38b8-4ea6-97e4-0634100f44e5-attachment.txt" title="Captured log call" type="text/plain"/>
      </attachments>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="4224-MainThread"/>
        <label name="host" value="Ostap-ПК"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps>
        <step start="1521562444932" status="passed" stop="1521562444932">
          <name>Sixth step</name>
          <title>Sixth step</title>
          <attachments/>
          <steps/>
        </step>
      </steps>
    </test-case>
    <test-case start="1521562444934" status="passed" stop="1521562444936">
      <name>test_validate_for_invalid[for_dict]</name>
      <attachments>
        <attachment source="6c62b6d1-484c-4688-8696-edb8f302e3d8-attachment.txt" title="Captured log call" type="text/plain"/>
      </attachments>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="4224-MainThread"/>
        <label name="host" value="Ostap-ПК"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps>
        <step start="1521562444936" status="passed" stop="1521562444936">
          <name>Sixth step</name>
          <title>Sixth step</title>
          <attachments/>
          <steps/>
        </step>
      </steps>
    </test-case>
    <test-case start="1521562444939" status="passed" stop="1521562444942">
      <name>test_validate_for_invalid[for_list]</name>
      <attachments>
        <attachment source="7954bae3-7a31-47f0-afa2-ec6e79092cce-attachment.txt" title="Captured log call" type="text/plain"/>
      </attachments>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="4224-MainThread"/>
        <label name="host" value="Ostap-ПК"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps>
        <step start="1521562444941" status="passed" stop="1521562444941">
          <name>Sixth step</name>
          <title>Sixth step</title>
          <attachments/>
          <steps/>
        </step>
      </steps>
    </test-case>
  </test-cases>
</ns0:test-suite>
